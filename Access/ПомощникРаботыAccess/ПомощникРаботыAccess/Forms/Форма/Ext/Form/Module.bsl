
#Область ОбработчикиКомандФормы

&НаСервере
Процедура ТестНаСервере()

	ДокументРезультат = Новый ТабличныйДокумент;
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных = ОбъектНаСервере.ПолучитьМакет("СКД");	
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;         
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;          
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);// ,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,, Истина);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);

	ИмяТаблицы = СхемаКомпоновкиДанных.ВариантыНастроек[0].Имя;
	СоединениеСБазой = Неопределено;
	
	КаталогВыгрузки = "C:\Exp1C\" + ИмяТаблицы;
	УдалитьФайлы(КаталогВыгрузки);
	Ожидание(1000);
	СоздатьКаталог(КаталогВыгрузки);
	ПутьКФайлу = Неопределено;
	Запись = Неопределено;
	ОписаниеСтруктурыТаблицы = Неопределено;	
		
	МассивПримитвныхТипов = Новый Массив;
	МассивПримитвныхТипов.Добавить(Тип("Строка"));
	МассивПримитвныхТипов.Добавить(Тип("Булево"));
	МассивПримитвныхТипов.Добавить(Тип("Дата"));
	МассивПримитвныхТипов.Добавить(Тип("Число"));
	
	ПустыеЗначенияТипов = Новый Соответствие;
	ПустыеЗначенияТипов.Вставить(Тип("Строка"), "");
	ПустыеЗначенияТипов.Вставить(Тип("Булево"), Ложь);
	ПустыеЗначенияТипов.Вставить(Тип("Дата"), Дата(1,1,1));
	ПустыеЗначенияТипов.Вставить(Тип("Число"), 0);
	
	КоличествоВыгружено = 0;
	ФайлБазыДанныхОпределен = Ложь;
	ОписаниеСтруктурыТаблицыОпределено = Ложь;
	НаборЗаписиТаблицыОпределен = Ложь;
	КэшНастроекМакетов = Новый Соответствие;
	СоответствиеВыраженияПараметраИПоляПрототипа = Новый Соответствие;
	
	МассивКомандВставкиЗначений = Новый Массив;
	НомерФайлаБазыДанных = 0;
	ПроцессорВывода.НачатьВывод();	
	ЭлементРезультатКомпоновки = ПроцессорКомпоновкиДанных.Следующий();
	Пока ЭлементРезультатКомпоновки <> Неопределено Цикл
		
		#Область ОпределениеСтруктурыТаблицыВыгрузки
		
		Если НЕ ОписаниеСтруктурыТаблицыОпределено Тогда
			
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультатКомпоновки);
			
			НеобходимоОпределитьСтруктуруТаблицы = Ложь;
			Если НеобходимоОпределитьСтруктуруТаблицы = Ложь
				И ОписаниеСтруктурыТаблицы = Неопределено Тогда
				Если ЭлементРезультатКомпоновки.ЗначенияПараметров.Количество() > 0 Тогда			
					НеобходимоОпределитьСтруктуруТаблицы = Истина;
				КонецЕсли;			
			КонецЕсли;
					
			Если НеобходимоОпределитьСтруктуруТаблицы Тогда
							
				ТаблицаПрототип = Новый ТаблицаЗначений;
							
				НастройкиТекущегоМакета = МакетКомпоновки.Макеты[ЭлементРезультатКомпоновки.Макет];
				ПараметрыМакета = НастройкиТекущегоМакета.Параметры;
				Для Каждого ПараметрМакета Из ПараметрыМакета Цикл
					
					ИмяНабораДанных = Лев(ПараметрМакета.Выражение, СтрНайти(ПараметрМакета.Выражение, ".") - 1);
					
					ТекстЗапроса = МакетКомпоновки.НаборыДанных[ИмяНабораДанных].Запрос;
					СЗ = Новый СхемаЗапроса;
					СЗ.УстановитьТекстЗапроса(ТекстЗапроса);
					КолонкиЗапросов = СЗ.ПакетЗапросов[СЗ.ПакетЗапросов.Количество() - 1].Колонки;

					ПоляНабораДанных = МакетКомпоновки.НаборыДанных[ИмяНабораДанных].Поля;
					
					// 1. Находим поле набора данных
					ИмяПоля = Неопределено;
					ИмяПоляТаблицыПрототипа = Неопределено;
					Для Каждого ПолеНабора Из ПоляНабораДанных Цикл
						ПолныйПутьКДанным = ИмяНабораДанных + "." + ПолеНабора.ПутьКДанным;
						Если ПараметрМакета.Выражение = ПолныйПутьКДанным Тогда
							ИмяПоля = ПолеНабора.Имя;
							ИмяПоляТаблицыПрототипа = СтрЗаменить(ПолеНабора.ПутьКДанным, ".", "");
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					// 2. Находим по имени соответствующие поле запроса и его тип
					НайденноеПолеЗапроса = КолонкиЗапросов.Найти(ИмяПоля);
					ТипПоляЗапроса = НайденноеПолеЗапроса.ТипЗначения;
					  				
					// 3. Создаем колонку таб части с именем (путь к данным без точек) и типом (как в запросе)
					ТаблицаПрототип.Колонки.Добавить(ИмяПоляТаблицыПрототипа, ТипПоляЗапроса);
					
					СоответствиеВыраженияПараметраИПоляПрототипа.Вставить(ПараметрМакета.Выражение, ИмяПоляТаблицыПрототипа);
					
				КонецЦикла;
				
				ОписаниеСтруктурыТаблицы = ОбъектНаСервере.СоставлениеСтруктурыОписанияПолей(ТаблицаПрототип, ИмяТаблицы);
				ОписаниеСтруктурыТаблицыОпределено = Истина;
			КонецЕсли;
		КонецЕсли;
		
		#КонецОбласти
				
		Если ОписаниеСтруктурыТаблицыОпределено
			И ЗначениеЗаполнено(ЭлементРезультатКомпоновки.Макет)
			И ЭлементРезультатКомпоновки.ЗначенияПараметров.Количество() > 0 Тогда
			        							
			СоответствиеПараметровИПолей = КэшНастроекМакетов.Получить(ЭлементРезультатКомпоновки.Макет);
			Если СоответствиеПараметровИПолей = Неопределено Тогда
				СоответствиеПараметровИПолей = Новый Соответствие;					
				НастройкиТекущегоМакета = МакетКомпоновки.Макеты[ЭлементРезультатКомпоновки.Макет];
				ПараметрыМакета = НастройкиТекущегоМакета.Параметры;
				Для Каждого ПараметрМакета Из ПараметрыМакета Цикл
					ИмяПараметра = ПараметрМакета.Имя;
					ВыражениеПараметра = ПараметрМакета.Выражение;
					ИмяПоляИзВыражения = СоответствиеВыраженияПараметраИПоляПрототипа.Получить(ВыражениеПараметра);						
					СоответствиеПараметровИПолей.Вставить(ИмяПоляИзВыражения, ИмяПараметра);
				КонецЦикла;
				КэшНастроекМакетов.Вставить(ЭлементРезультатКомпоновки.Макет, СоответствиеПараметровИПолей);	
			КонецЕсли;
			
			#Область СозданиеФайлаБазыДанных
			
			Если НЕ ФайлБазыДанныхОпределен Тогда
				НомерФайлаБазыДанных = НомерФайлаБазыДанных + 1;
				ПутьКФайлу = КаталогВыгрузки + "\ПорцияВыгрузки_" + XMLСтрока(НомерФайлаБазыДанных) + ".accdb";
				СоздатьФайлБазыДанных(ПутьКФайлу, Истина);
				СоединениеСБазой = ОбъектНаСервере.ПолучитьСоединениеADO(ПутьКФайлу); 	
				ФайлБазыДанныхОпределен = Истина;
			КонецЕсли;
			
			#КонецОбласти
			
			#Область СозданиеНабораЗаписейТаблицы
			
			Если НЕ НаборЗаписиТаблицыОпределен Тогда
				ОбъектНаСервере.СоздатьТаблицуБазыДанных(ПутьКФайлу, ОписаниеСтруктурыТаблицы, СоединениеСБазой);
				Ожидание(300);
				Запись = Новый COMОбъект("ADODB.RecordSet");	
				ТекстЗапроса = "SELECT * FROM " + ИмяТаблицы;	
				Запись.Open(ТекстЗапроса, СоединениеСБазой, 1, 3);
				НаборЗаписиТаблицыОпределен = Истина;
			КонецЕсли;
			
			#КонецОбласти
					
			
			Запись.AddNew();
			Для Каждого Эл Из ОписаниеСтруктурыТаблицы.ОписаниеПолей Цикл
								
				ИмяПараметраПоля = СоответствиеПараметровИПолей[Эл.Имя];
				ЗначениеПараметраПоля = ЭлементРезультатКомпоновки.ЗначенияПараметров[ИмяПараметраПоля].Значение;
				Если ЗначениеЗаполнено(ЗначениеПараметраПоля) Тогда
					Если МассивПримитвныхТипов.Найти(ТипЗнч(ЗначениеПараметраПоля)) = Неопределено Тогда
						Запись.Fields(Эл.ИндексКолонки).Value = Строка(ЗначениеПараметраПоля);
					Иначе						
						Запись.Fields(Эл.ИндексКолонки).Value = ЗначениеПараметраПоля;						
					КонецЕсли;
				Иначе
					Запись.Fields(Эл.ИндексКолонки).Value = ПустыеЗначенияТипов.Получить(Эл.ТипЗначения);
				КонецЕсли;
				
			КонецЦикла;
			Запись.UpDate();
			
			КоличествоВыгружено = КоличествоВыгружено + 1;
			
			Если КоличествоВыгружено % 1000 = 0 Тогда
				ФайлБазыДанных = Новый Файл(ПутьКФайлу);
				Ожидание(3000);
				РазмерВБайтах = ФайлБазыДанных.Размер();
				РазмерВМегабайтах = РазмерВБайтах / 1024 / 1024;
				
				Если РазмерВМегабайтах > 1200 Тогда
					
					НаборЗаписиТаблицыОпределен = Ложь;
					Запись = Неопределено;
					
					ОбъектНаСервере.ЗакрытьСоединениеADO(СоединениеСБазой);						
					ФайлБазыДанныхОпределен = Ложь;					
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		     		
		ЭлементРезультатКомпоновки = ПроцессорКомпоновкиДанных.Следующий();
	КонецЦикла;
	ПроцессорВывода.ЗакончитьВывод();
	
	ОбъектНаСервере.ЗакрытьСоединениеADO(СоединениеСБазой);
	
КонецПроцедуры

&НаКлиенте
Процедура Тест(Команда)
	
	ТестНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

//Процедура ВыгрузитьТаблицуЗначений(ПутьКФайлу, ИмяТаблицы, ТаблицаДляВыгрузки) Экспорт
//	
//	СоздатьФайлБазыДанных(ПутьКФайлу, Истина);	
//	СтруктураТаблицы = СоставлениеСтруктурыОписанияПолей(ТаблицаДляВыгрузки, ИмяТаблицы);
//	СоздатьТаблицуБазыДанных(ПутьКФайлу, СтруктураТаблицы);	
//	ЗаполнитьТаблицуПоИсточнику(ПутьКФайлу, ИмяТаблицы, ТаблицаДляВыгрузки, СтруктураТаблицы);
//	
//КонецПроцедуры

//Процедура ВыгрузитьОтчетСКД(ПутьКФайлу, ИмяТаблицы, ПроцессорКомпоновкиДанных) Экспорт
	
//КонецПроцедуры

#КонецОбласти

#Область Служебные

Процедура Ожидание(Миллисекунды)
	
	ЖдатьДо = ТекущаяУниверсальнаяДатаВМиллисекундах() + (Миллисекунды);
	Пока ЖдатьДо >= ТекущаяУниверсальнаяДатаВМиллисекундах() Цикл
		// Ничего не делаем
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьФайлБазыДанных(ПутьКФайлу, ПерезаписыватьФайл = Истина)
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	ОбъектНаСервере.СоздатьФайлБазыДанных(ПутьКФайлу, ПерезаписыватьФайл);
	
	//Если ПустаяСтрока(ПутьКФайлу) Тогда 
	//	ВызватьИсключение "Пустой путь к файлу базы данных";
	//Иначе
	//	Если ПерезаписыватьФайл Тогда
	//		Файл = Новый Файл(ПутьКФайлу);
	//		Если Файл.Существует() Тогда
	//			Файл = Неопределено;
	//			УдалитьФайлы(ПутьКФайлу);
	//		КонецЕсли;
	//	КонецЕсли;              
	//КонецЕсли;
	//
	//Попытка
	//	АДОХ = Новый COMОбъект("ADOX.Catalog");
	//Исключение
	//	ВызватьИсключение 
	//		"Не удалось сформировать файл с данными. 
	//		|При создании объекта ADOX.Catalog произошла ошибка!
	//		|Ошибка: " + ОписаниеОшибки();
	//КонецПопытки;
	//
	//СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=""" + ПутьКФайлу + """;Jet OLEDB:Engine Type=5;"; 
	//
	//Попытка
	//	АДОХ.Create(СтрокаПодключения);
	//Исключение
	//	ВызватьИсключение
	//		"Не удалось сформировать файл с данными. 
	//		|При создании объекта ADOX.Catalog произошла ошибка!
	//		|Ошибка: " + ОписаниеОшибки();
	//КонецПопытки;
	//АДОХ.ActiveConnection.Close();
	//АДОХ = Неопределено;	
	
КонецПроцедуры

Процедура СоздатьТаблицуБазыДанных(ПутьКБазе, ОписаниеТаблицы)
	
	СтрокаПодключения = "Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=" + ПутьКБазе;
	Connection = Новый COMОбъект("ADODB.Connection");	
	Попытка 		
		Connection.Open(СтрокаПодключения);		
	Исключение		
		Сообщить(ОписаниеОшибки());		
		Возврат;		
	КонецПопытки;
		
	Команда = Новый COMОбъект("ADODB.Command");
	Команда.ActiveConnection=Connection;
	ТекстЗапроса = 
		"CREATE TABLE " + ОписаниеТаблицы.ИмяТаблицы +  "
		|(
		|	ID INTEGER PRIMARY KEY,";
	
	НомерПоля = 1;
	ВсегоПолей = ОписаниеТаблицы.ОписаниеПолей.Количество();
	Для Каждого ПолеТаблицы Из ОписаниеТаблицы.ОписаниеПолей Цикл
		
		ЭтоПоследнееПоле = (НомерПоля = ВсегоПолей);
		
		ТекстЗапроса = ТекстЗапроса + "
		|	" + ПолеТаблицы.Имя + " " + ПолеТаблицы.ИмяТипаЗначения + ?(ЭтоПоследнееПоле, "", ",");
		
		НомерПоля = НомерПоля + 1;
		
	КонецЦикла;
			
	ТекстЗапроса = ТекстЗапроса + "
		|)";
	
	НаборЗаписей = Новый COMОбъект("ADODB.RecordSet");
	Команда.CommandText=ТекстЗапроса;
	Попытка
		НаборЗаписей=Команда.Execute();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

	Connection = Неопределено;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуПоИсточнику(ПутьКФайлу, ИмяТаблицы, ИсточникДанных, СтруктураТаблицы)
	
	СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0; Data Source=" + ПутьКФайлу + ";""";
	
	Connection = Новый COMОбъект("ADODB.Connection");	
	Попытка 		
		Connection.Open(СтрокаПодключения);		
	Исключение		
		Сообщить(ОписаниеОшибки());		
		Возврат;		
	КонецПопытки;
	
	Запись = Новый COMОбъект("ADODB.RecordSet");	
	ТекстЗапроса = "SELECT * FROM " + ИмяТаблицы;	
	Запись.Open(ТекстЗапроса, Connection, 1, 3);	
	
	Если ТипЗнч(ИсточникДанных) = Тип("ТаблицаЗначений") Тогда
		Для Каждого Стр Из ИсточникДанных Цикл
			
			НомерПоля = 0;
			Запись.AddNew();
			Для Каждого Эл Из СтруктураТаблицы.ОписаниеПолей Цикл
				Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Стр[Эл.Имя])) Тогда
					Запись.Fields(НомерПоля).Value = Строка(Стр[Эл.Имя]);
				Иначе
					Запись.Fields(НомерПоля).Value = Стр[Эл.Имя];
				КонецЕсли;
				НомерПоля = НомерПоля + 1;
			КонецЦикла;
			Запись.UpDate();
			
		КонецЦикла;
	Иначе
		ВызватьИсключение 
			"Неизвестный тип источника данных: " + ТипЗнч(ИсточникДанных);
	КонецЕсли;
		
	Connection.Close();	
	Connection = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеФункции

//функция создаёт новый файл БД с возможностью перезаписи старого
//Параметр 1: строка - полное имя файла базы данных
//Параметр 2: булево - флаг перезаписи в случае если файл БД уже существует
//возвращает 0 в случае удачного завершения работы и не 0 если функция потерпела неудачу
Функция СоздатьФайлАксес(Знач ИмяФайла, Знач ПерезаписыватьФайл = Истина)
        //Проверим валидность имени файла
        Если ПустаяСтрока(ИмяФайла) Тогда 
                Возврат -2;
        Иначе
                //анализ нахождения файла на диске
                Если ПерезаписыватьФайл Тогда
                        Файл = Новый Файл(ИмяФайла);
                        Если Файл.Существует() Тогда
                                Файл = Неопределено;
                                УдалитьФайлы(ИмяФайла);
                        КонецЕсли;
                КонецЕсли;              
        КонецЕсли;
        
        //Состояние("Создаётся файл access: " + ИмяФайла);
        //создаём оболочку БД
        Попытка
                АДОХ = Новый COMОбъект("ADOX.Catalog");
        Исключение
                Сообщить("Не удалось сформировать файл с данными. При создании объекта ADOX.Catalog произошла ошибка!" + Символы.ПС +
                ОписаниеОшибки());
        КонецПопытки;
        
        //Подключение к только что созданной БД
        СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=""" + ИмяФайла + """;Jet OLEDB:Engine Type=5;"; 
        
        //подключаемся
        Попытка
                АДОХ.Create(СтрокаПодключения);
        Исключение
                Сообщить("Не удалось сформировать файл с данными. При создании объекта ADOX.Catalog произошла ошибка!" + Символы.ПС +
                ОписаниеОшибки());
                Возврат -1;
        КонецПопытки;
        АДОХ.ActiveConnection.Close();
        АДОХ = Неопределено;
        Возврат 0;
КонецФункции

//функция вносит данные в таблицу
//Параметр 1: строка - полное имя файла базы данных
//Параметр 2: ТаблицаЗначений - Таблица с данными к выгрузке
//Параметр 3: структура - описание создаваемой таблицы (сформировать можно с помощью функции: СоставлениеСтруктурыОписанияПолей)
//Возвращает 0 в случае удачного завершения работы и не 0 если функция потерпела неудачу
Функция ВнесениеДанныхТаблицу(Знач ИмяФайла, Знач ТаблицаДанных, Знач ОписаниеТаблицы)
    СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=""" + ИмяФайла + """;Jet OLEDB:Engine Type=5;";

    //объект отвечающий за связь с БД
    Коннектор = Новый COMОбъект("ADODB.Connection");
    Коннектор.ConnectionString = СтрокаПодключения;
    //подключение
    Попытка
        Коннектор.Open();
    Исключение
        Сообщить("Не удалось открыть файл БД!");
        Сообщить(ОписаниеОшибки());
        Возврат -1;
    КонецПопытки;
	//Состояние("Заполняю данными таблицу: " + ОписаниеТаблицы.ИмяТаблицы);
    
    //командный объект БД
    Ком = Новый COMОбъект("ADODB.Command");
    Ком.ActiveConnection = Коннектор;
    //константа 1 означает "запрос", бывают еще представления и хранимые процедуры
    Ком.CommandType = 1;
    
    СчётчикСтрок = 1;
    Для Каждого СтрокаТЗ Из ТаблицаДанных Цикл
		//ОбработкаПрерыванияПользователя();
        //обходим колонки данных
        СписокПолей = Формат(СчётчикСтрок, "ЧГ=") + "," + Символы.ПС;
        СчётчикСтрок = СчётчикСтрок + 1;
        
        СчётчикКолонок = 0;
        //цикл для формирования списка полей
        Для Каждого КолонкаТЗ Из ТаблицаДанных.Колонки Цикл
            ТекЗначение = СтрокаТЗ[КолонкаТЗ.Имя];
            ОписаниеПоля = ОписаниеТаблицы.ОписаниеПолей.Получить(СчётчикКолонок);
            //анализ типа данных
            Если ОписаниеПоля.Тип = "3" Тогда //число целое
                //преобразуем null к 0 потому как дальнейшая функция Формат() не преобразует его правильно
                ТекЗначение = ?(ТекЗначение = null, 0, ТекЗначение);
                СписокПолей = СписокПолей + Формат(ТекЗначение, "ЧН=null; ЧГ=") + "," + Символы.ПС;
            ИначеЕсли ОписаниеПоля.Тип = "5" Тогда //число дробное
                //преобразуем null к 0 потому как дальнейшая функция Формат() не преобразует его правильно
                ТекЗначение = ?(ТекЗначение = null, 0, ТекЗначение);
                СписокПолей = СписокПолей + Формат(ТекЗначение, "ЧРД=.; ЧН=null; ЧГ=") + "," + Символы.ПС;
            ИначеЕсли ОписаниеПоля.Тип = "7" Тогда //дата
                ТекЗначение = ?(ТекЗначение = null, '00010101', ТекЗначение);
                Если ТекЗначение = '00010101' Тогда
                    МодЗначение = "null";
                Иначе
                    МодЗначение = "'" + Формат(ТекЗначение, "ДЛФ=DT") + "'";
                КонецЕсли;
                СписокПолей = СписокПолей + МодЗначение + "," + Символы.ПС;
            ИначеЕсли ОписаниеПоля.Тип = "11" Тогда //булево
                ТекЗначение = ?(ТекЗначение = null, Ложь, ТекЗначение);
                СписокПолей = СписокПолей + Формат(ТекЗначение, "БЛ=false; БИ=true") + "," + Символы.ПС;
            ИначеЕсли ОписаниеПоля.Тип = "202" Тогда //строка
                ТекЗначение = ?(ТекЗначение = null, "", ТекЗначение);
                ЗначениеСтрокой = Лев(ТекЗначение, 255);
                Если ПустаяСтрока(ЗначениеСтрокой) Тогда
                    СписокПолей = СписокПолей + "null," + Символы.ПС;
                Иначе    
                    //Одиночная кавычка является спец символом в sql
                    //преобразуем этот символ через код
                    МодЗначение = СтрЗаменить(ЗначениеСтрокой, "'", "' + chr(" + КодСимвола("'") + ") + '");
                    СписокПолей = СписокПолей + "'" + СокрЛП(Лев(МодЗначение, 255)) + "'," + Символы.ПС
                КонецЕсли;
            ИначеЕсли ОписаниеПоля.Тип = "203" Тогда //строка
                Если ПустаяСтрока(ЗначениеСтрокой) Тогда
                    СписокПолей = СписокПолей + "null," + Символы.ПС;
                Иначе
                    МодЗначение = СтрЗаменить(ТекЗначение, "'", "' + chr(" + КодСимвола("'") + ") + '");
                    СписокПолей = СписокПолей + "'" + МодЗначение + "'," + Символы.ПС
                КонецЕсли;
            КонецЕсли;
            СчётчикКолонок = СчётчикКолонок + 1;
        КонецЦикла; //Для Каждого КолонкаТЗ Из ТаблицаДанных.Колонки Цикл
        //обрезаем последнюю запятую
        СписокПолей = Лев(СписокПолей, СтрДлина(СписокПолей) - 2);
        //окончательное формирование теста запроса
        ТекстЗапроса = "INSERT INTO " + ОписаниеТаблицы.ИмяТаблицы + " VALUES (" + СписокПолей + ")";
        Ком.CommandText = ТекстЗапроса;
        
        //запись данных в БД (выполнение запроса)
        Попытка
            Ком.Execute();
        Исключение
            Сообщить("Ошибка записи данных!" + Символы.ПС 
            + "Текст запроса: " + ТекстЗапроса + Символы.ПС
            + ОписаниеОшибки());
            Возврат -2;
        КонецПопытки;
    КонецЦикла; //Для Каждого СтрокаТЗ Из Данные Цикл
    
    //закрываем подключение
    Ком.ActiveConnection.Close();
    Ком = Неопределено;
    Коннектор = Неопределено;    
    Возврат 0;
КонецФункции

#КонецОбласти