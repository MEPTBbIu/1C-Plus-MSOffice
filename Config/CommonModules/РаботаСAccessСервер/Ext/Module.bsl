
#Область ПрограммныйИнтерфейс

Процедура ВыгрузитьТаблицуЗначений(ПутьКБазе, ИсточникДанных, ИмяТаблицы = Неопределено, Соединение = Неопределено) Экспорт
	
	Если ИмяТаблицы = Неопределено Тогда
		ИмяТаблицы = "ВыгрузкаОт" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd");
	КонецЕсли;
	
	ОписаниеСтруктурыТаблицы = РаботаСAccessКлиентСервер.СоставлениеСтруктурыОписанияПолей(ИсточникДанных, ИмяТаблицы);
	
	РаботаСAccessКлиентСервер.СоздатьБазуДанныхAccess(ПутьКБазе, Истина, Ложь);
	
	ЗакрытьСоединениеПоЗавершению = Ложь;
	Если Соединение = Неопределено Тогда	
		Соединение = РаботаСAccessКлиентСервер.ПолучитьСоединениеADO(ПутьКБазе);	
		ЗакрытьСоединениеПоЗавершению = Истина;
	КонецЕсли;
	
	РаботаСAccessКлиентСервер.СоздатьТаблицуБазыДанных(ПутьКБазе, ОписаниеСтруктурыТаблицы, Соединение, Ложь);
	
	Запись = Новый COMОбъект("ADODB.RecordSet");	
	ТекстЗапроса = "SELECT * FROM " + ИмяТаблицы;	
	Запись.Open(
		// Текст запроса 
		ТекстЗапроса, 
		// Соединение с базой
		Соединение,
		// Указывает тип курсора, используемого в записей объекта.
		// CursorType (https://docs.microsoft.com/ru-ru/sql/ado/reference/ado-api/cursortypeenum?view=sql-server-2017)
		// 1 = adOpenKeyset. Использует курсор набора ключей. 
		1, 			  
		// Тип блокировки
		// LockTypeEnum (https://docs.microsoft.com/ru-ru/sql/ado/reference/ado-api/open-method-ado-recordset?view=sql-server-2017)
		// 3 = adLockOptimistic (Указывает, оптимистической блокировки, записей.)
		3
	);	
		
	Для Каждого Стр Из ИсточникДанных Цикл
		
		НомерПоля = 0;
		Запись.AddNew();
		
		Для Каждого Эл Из ОписаниеСтруктурыТаблицы.ОписаниеПолей Цикл
			
			ИмяПараметраПоля = Эл.Имя;
			ЗначениеПараметраПоля = Стр[Эл.Имя];
			
			Если ЗначениеЗаполнено(ЗначениеПараметраПоля) Тогда
				Если НЕ РаботаСAccessСлужебныйКлиентСервер.ЭтоПримитивныйТип(ТипЗнч(ЗначениеПараметраПоля)) Тогда						
					Запись.Fields(Эл.ИндексКолонки).Value = Строка(ЗначениеПараметраПоля);
				Иначе						
					Если Эл.ТипЗначения = Тип("Строка") Тогда
						НормализованнаяСтрока = СокрЛП(ЗначениеПараметраПоля);
						Если ЗначениеЗаполнено(Эл.Длина) Тогда
							Запись.Fields(Эл.ИндексКолонки).Value = Лев(НормализованнаяСтрока, Эл.Длина)
						Иначе
							Запись.Fields(Эл.ИндексКолонки).Value = НормализованнаяСтрока;
						КонецЕсли;
					ИначеЕсли Эл.ТипЗначения = Тип("Дата") Тогда
						Если РаботаСAccessСлужебныйКлиентСервер.ЭтоКорректнаяДата(ЗначениеПараметраПоля) Тогда
							Запись.Fields(Эл.ИндексКолонки).Value = ЗначениеПараметраПоля;	
						КонецЕсли;
					Иначе
						Запись.Fields(Эл.ИндексКолонки).Value = ЗначениеПараметраПоля;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			НомерПоля = НомерПоля + 1;
			
		КонецЦикла;
		
		Запись.UpDate();
		
	КонецЦикла;
	
	Если ЗакрытьСоединениеПоЗавершению Тогда
		
		РаботаСAccessКлиентСервер.ЗакрытьСоединениеADO(Соединение);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьЗапрос(ПутьКбазе, ОбъектЗапроса, ИмяТаблицы = Неопределено, Соединение = Неопределено) Экспорт
	
КонецПроцедуры

Процедура ВыгрузитьОтчетСКД(ПутьКбазе, СхемаКомпоновкиДанных, НастройкиОтчета, ИмяТаблицы = Неопределено, Соединение = Неопределено) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Служебные

Функция СКД_ПолучитьПараметрыВыгрузкиAccess(СхемаКомпоновкиДанных, Настройки)
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ИмяТаблицы");
	ПараметрыВыгрузки.Вставить("ОписаниеСтруктурыТаблицы");
	ПараметрыВыгрузки.Вставить("СоответствиеВыраженияПараметраИПоляПрототипа");
	
	ДокументРезультат = Новый ТабличныйДокумент;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;          
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,, Истина);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ИмяТаблицы = "ВыгрузкаДанных"; //ПредставлениеТекущегоВарианта;
	СоответствиеВыраженияПараметраИПоляПрототипа = Новый Соответствие;
	ОписаниеСтруктурыТаблицы = Неопределено;
	
	Для Каждого НастройкиТекущегоМакета Из МакетКомпоновки.Макеты Цикл
		Если НастройкиТекущегоМакета.Параметры.Количество() > 0 Тогда
			ТаблицаПрототип = Новый ТаблицаЗначений;
			
			ПараметрыМакета = НастройкиТекущегоМакета.Параметры;
			Для Каждого ПараметрМакета Из ПараметрыМакета Цикл
				
				ИмяНабораДанных = Лев(ПараметрМакета.Выражение, СтрНайти(ПараметрМакета.Выражение, ".") - 1);
				
				Если НЕ ЗначениеЗаполнено(ИмяНабораДанных) Тогда
					Продолжить;
				КонецЕсли;
				
				ТекстЗапроса = МакетКомпоновки.НаборыДанных[ИмяНабораДанных].Запрос;
				СЗ = Новый СхемаЗапроса;
				СЗ.УстановитьТекстЗапроса(ТекстЗапроса);
				КолонкиЗапросов = СЗ.ПакетЗапросов[СЗ.ПакетЗапросов.Количество() - 1].Колонки;
				
				ПоляНабораДанных = МакетКомпоновки.НаборыДанных[ИмяНабораДанных].Поля;
				
				// 1. Находим поле набора данных
				ИмяПоля = Неопределено;
				ИмяПоляТаблицыПрототипа = Неопределено;
				Для Каждого ПолеНабора Из ПоляНабораДанных Цикл
					ПолныйПутьКДанным = ИмяНабораДанных + "." + ПолеНабора.ПутьКДанным;
					Если ПараметрМакета.Выражение = ПолныйПутьКДанным Тогда
						ИмяПоля = ПолеНабора.Имя;
						ИмяПоляТаблицыПрототипа = СтрЗаменить(ПолеНабора.ПутьКДанным, ".", "");
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				// 2. Находим по имени соответствующие поле запроса и его тип
				Для Каждого ПолеЗапроса Из КолонкиЗапросов Цикл
					Если ПолеЗапроса.Псевдоним = ИмяПоля Тогда
						НайденноеПолеЗапроса = ПолеЗапроса;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НайденноеПолеЗапроса = Неопределено Тогда
					Продолжить;
				КонецЕсли;					
				ТипПоляЗапроса = НайденноеПолеЗапроса.ТипЗначения;
				
				// 3. Создаем колонку таб части с именем (путь к данным без точек) и типом (как в запросе)
				ТаблицаПрототип.Колонки.Добавить(ИмяПоляТаблицыПрототипа, ТипПоляЗапроса);
				
				СоответствиеВыраженияПараметраИПоляПрототипа.Вставить(ПараметрМакета.Выражение, ИмяПоляТаблицыПрототипа);
				
			КонецЦикла;
			
			ОписаниеСтруктурыТаблицы = РаботаСAccessКлиентСервер.СоставлениеСтруктурыОписанияПолей(ТаблицаПрототип, ИмяТаблицы);			
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыВыгрузки.ИмяТаблицы = ИмяТаблицы;
	ПараметрыВыгрузки.ОписаниеСтруктурыТаблицы = ОписаниеСтруктурыТаблицы;
	ПараметрыВыгрузки.СоответствиеВыраженияПараметраИПоляПрототипа = СоответствиеВыраженияПараметраИПоляПрототипа;
	
	Возврат ПараметрыВыгрузки;	
	
КонецФункции

Функция СКД_ВыгрузитьВAccess(ДанныеБазыШаблона, ПараметрыВыгрузки, СхемаКомпоновкиДанных, Настройки)
		
	ИдентификаторВыгрузки = Строка(Новый УникальныйИдентификатор);
	ВременныйКаталог = КаталогВременныхФайлов() + ИдентификаторВыгрузки;
	СоздатьКаталог(ВременныйКаталог);
	ПутьКШаблонуБазы = ВременныйКаталог + "\TempldateAccessDB.accdb";
	ДанныеБазыШаблона.Записать(ПутьКШаблонуБазы);
	
	ДокументРезультат = Новый ТабличныйДокумент;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;          
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,, Истина);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);

	ИмяТаблицы = ПараметрыВыгрузки.ИмяТаблицы;
	СоединениеСБазой = Неопределено;
	
	КаталогВыгрузки = ВременныйКаталог + "\" + ИмяТаблицы;
	Попытка
		УдалитьФайлы(КаталогВыгрузки);
	Исключение КонецПопытки;
	РаботаСAccessКлиентСервер.Ожидание(1000);
	СоздатьКаталог(КаталогВыгрузки);
	ПутьКФайлу = Неопределено;
	Запись = Неопределено;
	ОписаниеСтруктурыТаблицы = ПараметрыВыгрузки.ОписаниеСтруктурыТаблицы;	
		
	МассивПримитвныхТипов = Новый Массив;
	МассивПримитвныхТипов.Добавить(Тип("Строка"));
	МассивПримитвныхТипов.Добавить(Тип("Булево"));
	МассивПримитвныхТипов.Добавить(Тип("Дата"));
	МассивПримитвныхТипов.Добавить(Тип("Число"));
	
	ПустыеЗначенияТипов = Новый Соответствие;
	ПустыеЗначенияТипов.Вставить(Тип("Строка"), "");
	ПустыеЗначенияТипов.Вставить(Тип("Булево"), Ложь);
	ПустыеЗначенияТипов.Вставить(Тип("Дата"), Дата(100,1,1));
	ПустыеЗначенияТипов.Вставить(Тип("Число"), 0);
	
	КоличествоВыгружено = 0;
	ФайлБазыДанныхОпределен = Ложь;
	ОписаниеСтруктурыТаблицыОпределено = Истина;
	НаборЗаписиТаблицыОпределен = Ложь;
	КэшНастроекМакетов = Новый Соответствие;
	СоответствиеВыраженияПараметраИПоляПрототипа = Новый Соответствие;
	
	НомерФайлаБазыДанных = 0;
	ПроцессорВывода.НачатьВывод();	
	ЭлементРезультатКомпоновки = ПроцессорКомпоновкиДанных.Следующий();
	Пока ЭлементРезультатКомпоновки <> Неопределено Цикл
		
		#Область ОпределениеСтруктурыТаблицыВыгрузки
		
		Если НЕ ОписаниеСтруктурыТаблицыОпределено Тогда
			
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультатКомпоновки);
			
			НеобходимоОпределитьСтруктуруТаблицы = Ложь;
			Если НеобходимоОпределитьСтруктуруТаблицы = Ложь
				И ОписаниеСтруктурыТаблицы = Неопределено Тогда
				Если ЭлементРезультатКомпоновки.ЗначенияПараметров.Количество() > 0 Тогда			
					НеобходимоОпределитьСтруктуруТаблицы = Истина;
				КонецЕсли;			
			КонецЕсли;
					
		КонецЕсли;
		
		#КонецОбласти
				
		Если ОписаниеСтруктурыТаблицыОпределено
			И ЗначениеЗаполнено(ЭлементРезультатКомпоновки.Макет)
			И ЭлементРезультатКомпоновки.ЗначенияПараметров.Количество() > 0 Тогда
			
			СоответствиеПараметровИПолей = КэшНастроекМакетов.Получить(ЭлементРезультатКомпоновки.Макет);
			Если СоответствиеПараметровИПолей = Неопределено Тогда
				СоответствиеВыраженияПараметраИПоляПрототипа = ПараметрыВыгрузки.СоответствиеВыраженияПараметраИПоляПрототипа;
				СоответствиеПараметровИПолей = Новый Соответствие;					
				НастройкиТекущегоМакета = МакетКомпоновки.Макеты[ЭлементРезультатКомпоновки.Макет];
				ПараметрыМакета = НастройкиТекущегоМакета.Параметры;
				Для Каждого ПараметрМакета Из ПараметрыМакета Цикл
					ИмяПараметра = ПараметрМакета.Имя;
					ВыражениеПараметра = ПараметрМакета.Выражение;
					ИмяПоляИзВыражения = СоответствиеВыраженияПараметраИПоляПрототипа.Получить(ВыражениеПараметра);						
					СоответствиеПараметровИПолей.Вставить(ИмяПоляИзВыражения, ИмяПараметра);
				КонецЦикла;
				КэшНастроекМакетов.Вставить(ЭлементРезультатКомпоновки.Макет, СоответствиеПараметровИПолей);	
			КонецЕсли;
			
			#Область СозданиеФайлаБазыДанных
			
			Если НЕ ФайлБазыДанныхОпределен Тогда
				НомерФайлаБазыДанных = НомерФайлаБазыДанных + 1;
				ПутьКФайлу = КаталогВыгрузки + "\ПорцияВыгрузки_" + XMLСтрока(НомерФайлаБазыДанных) + ".accdb";				
				КопироватьФайл(ПутьКШаблонуБазы, ПутьКФайлу);
				СоединениеСБазой = РаботаСAccessКлиентСервер.ПолучитьСоединениеADO(ПутьКФайлу); 	
				ФайлБазыДанныхОпределен = Истина;
			КонецЕсли;
			
			#КонецОбласти
			
			#Область СозданиеНабораЗаписейТаблицы
			
			Если НЕ НаборЗаписиТаблицыОпределен Тогда
				Запись = Новый COMОбъект("ADODB.RecordSet");	
				ТекстЗапроса = "SELECT * FROM " + ИмяТаблицы;	
				Запись.Open(ТекстЗапроса, СоединениеСБазой, 1, 3);
				НаборЗаписиТаблицыОпределен = Истина;
			КонецЕсли;
			
			#КонецОбласти
			
			Если СоответствиеПараметровИПолей.Количество() > 0 Тогда
			
				Запись.AddNew();
				Для Каждого Эл Из ОписаниеСтруктурыТаблицы.ОписаниеПолей Цикл
					ИмяПараметраПоля = СоответствиеПараметровИПолей[Эл.Имя];
					ЗначениеПараметраПоля = ЭлементРезультатКомпоновки.ЗначенияПараметров[ИмяПараметраПоля].Значение;
					Если ЗначениеЗаполнено(ЗначениеПараметраПоля) Тогда
						Если МассивПримитвныхТипов.Найти(ТипЗнч(ЗначениеПараметраПоля)) = Неопределено Тогда						
							Запись.Fields(Эл.ИндексКолонки).Value = Строка(ЗначениеПараметраПоля);
						Иначе						
							Если Эл.ТипЗначения = Тип("Строка") Тогда
								НормализованнаяСтрока = СокрЛП(ЗначениеПараметраПоля);
								Если ЗначениеЗаполнено(Эл.Длина) Тогда
									Запись.Fields(Эл.ИндексКолонки).Value = Лев(НормализованнаяСтрока, Эл.Длина)
								Иначе
									Запись.Fields(Эл.ИндексКолонки).Value = НормализованнаяСтрока;
								КонецЕсли;
							ИначеЕсли Эл.ТипЗначения = Тип("Дата") Тогда
								Если ЗначениеЗаполнено(ЗначениеПараметраПоля) Тогда
									Запись.Fields(Эл.ИндексКолонки).Value = ЗначениеПараметраПоля;	
								Иначе
									Запись.Fields(Эл.ИндексКолонки).Value = Дата(100,1,1);	
								КонецЕсли;
							Иначе
								Запись.Fields(Эл.ИндексКолонки).Value = ЗначениеПараметраПоля;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Запись.UpDate();
				КоличествоВыгружено = КоличествоВыгружено + 1;
				
				Если КоличествоВыгружено % 10000 = 0 Тогда
					ФайлБазыДанных = Новый Файл(ПутьКФайлу);
					РаботаСAccessКлиентСервер.Ожидание(3000);
					РазмерВБайтах = ФайлБазыДанных.Размер();
					РазмерВМегабайтах = РазмерВБайтах / 1024 / 1024;
					
					Если РазмерВМегабайтах > 1500 Тогда
						
						НаборЗаписиТаблицыОпределен = Ложь;
						Запись = Неопределено;
						
						РаботаСAccessКлиентСервер.ЗакрытьСоединениеADO(СоединениеСБазой);						
						ФайлБазыДанныхОпределен = Ложь;					
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		     		
		ЭлементРезультатКомпоновки = ПроцессорКомпоновкиДанных.Следующий();
	КонецЦикла;
	ПроцессорВывода.ЗакончитьВывод();
	РаботаСAccessКлиентСервер.ЗакрытьСоединениеADO(СоединениеСБазой);
		
	Коллекциябаз = НайтиФайлы(КаталогВыгрузки, "*.*");
	ПутьКАрхиву = ВременныйКаталог + "\" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + "_ВыгрузкаДанных_" + ИмяТаблицы + ".zip";
	Архив = Новый ЗаписьZipФайла(ПутьКАрхиву,, "Выгрузка данных в Acces """ + ИмяТаблицы + """");
	Для Каждого ФайлБазы Из Коллекциябаз Цикл
		Архив.Добавить(ФайлБазы.ПолноеИмя, РежимСохраненияПутейZIP.НеСохранятьПути);
	КонецЦикла;
	Архив.Записать();
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("АрхивВыгрузки", Новый ДвоичныеДанные(ПутьКАрхиву));
	СтруктураРезультат.Вставить("КоличествоВыгружено", КоличествоВыгружено);
	
	РаботаСAccessКлиентСервер.УдалитьФайлЕслиВозможно(ПутьКАрхиву);
	РаботаСAccessКлиентСервер.УдалитьФайлЕслиВозможно(ВременныйКаталог);
		
	Возврат СтруктураРезультат;
	
КонецФункции

#КонецОбласти