
#Область ПрограммныйИнтерфейс

Функция ВыгрузитьТаблицуЗначений(КаталогВыгрузки, ИсточникДанных, ИмяТаблицы = Неопределено, ОграниченияВыгрузкиКаждойБазы = Неопределено) Экспорт
	
	ИсточникОписанияСтруктурыТаблицы = ИсточникДанных.СкопироватьКолонки();
	
	Возврат ВыгрузитьИсточникВБазуДанных(КаталогВыгрузки, ИсточникДанных, ИмяТаблицы, ОграниченияВыгрузкиКаждойБазы, ИсточникОписанияСтруктурыТаблицы);
	
КонецФункции

Функция ВыгрузитьЗапрос(КаталогВыгрузки, ИсточникДанных, ИмяТаблицы = Неопределено, ОграниченияВыгрузкиКаждойБазы = Неопределено) Экспорт
		
	СЗ = Новый СхемаЗапроса;
	СЗ.УстановитьТекстЗапроса(ИсточникДанных.Текст);
	КолонкиЗапросов = СЗ.ПакетЗапросов[СЗ.ПакетЗапросов.Количество() - 1].Колонки;	
	ТаблицаПрототип = Новый ТаблицаЗначений;
	Для Каждого ПолеЗапроса Из КолонкиЗапросов Цикл
		ТаблицаПрототип.Колонки.Добавить(ПолеЗапроса.Псевдоним, ПолеЗапроса.ТипЗначения); 
	КонецЦикла;	
	
	РезультатЗапроса = ИсточникДанных.Выполнить();
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	
	Возврат ВыгрузитьИсточникВБазуДанных(КаталогВыгрузки, ВыборкаЗапроса, ИмяТаблицы, ОграниченияВыгрузкиКаждойБазы, ТаблицаПрототип);
	
КонецФункции

Функция ВыгрузитьРезультатКомпоновки(КаталогВыгрузки, СхемаКомпоновкиДанных, Настройки, ИмяТаблицы = Неопределено, ОграниченияВыгрузкиКаждойБазы = Неопределено) Экспорт
	
	ПараметрыВыгрузки = ПолучитьПараметрыВыгрузкиРезультатаКомпоновки(СхемаКомпоновкиДанных, Настройки);
	
	ДокументРезультат = Новый ТабличныйДокумент;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;          
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,, Истина);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	Возврат ВыгрузитьИсточникВБазуДанных(
		КаталогВыгрузки, 
		ПроцессорКомпоновкиДанных, 
		ИмяТаблицы, 
		ОграниченияВыгрузкиКаждойБазы, 
		ПараметрыВыгрузки.ТаблицаПрототип,
		ПараметрыВыгрузки);
	
КонецФункции

#КонецОбласти

#Область Служебные

Функция ВыгрузитьИсточникВБазуДанных(КаталогВыгрузки, ИсточникДанных, ИмяТаблицы, ОграниченияВыгрузкиКаждойБазы, 
	ИсточникОписанияСтруктурыТаблицы, СопоставлениеПолейИсточникаИПриемника = Неопределено)
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("КоличествоВыгружено", 0);
	
	Если ИмяТаблицы = Неопределено Тогда
		ИмяТаблицы = "ВыгрузкаОт" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd");
	КонецЕсли;
	
	// Получаем описание таблицы и ограничения каждой базы
	ОписаниеСтруктурыТаблицы = РаботаСAccessВызовСервера.СоставлениеСтруктурыОписанияПолей(ИсточникОписанияСтруктурыТаблицы, ИмяТаблицы);
	Если ОграниченияВыгрузкиКаждойБазы = Неопределено Тогда
		ОграниченияВыгрузкиКаждойБазы = РаботаСAccessКлиентСервер.ПолучитьОграниченияВыгрузкиБазы();	
	КонецЕсли;
	
	// Инициализируем временные каталоги и шаблон базы
	ИдентификаторВыгрузки = Строка(Новый УникальныйИдентификатор);
	ВременныйРабочийКаталог = РаботаСAccessКлиентСервер.ПолучитьВременныйРабочийКаталог();
	ВременныйКаталогВыгрузки = РаботаСAccessКлиентСервер.ПолучитьВременныйКаталогВыгрузки(ИдентификаторВыгрузки);
	ПутьКШаблонуБазы = РаботаСAccessКлиентСервер.ПолучитьПутьКФайлуШаблонаБазы();	
	РаботаСAccessКлиентСервер.СоздатьБазуДанныхAccess(ПутьКШаблонуБазы, Истина, Ложь);
	Соединение = РаботаСAccessКлиентСервер.ПолучитьСоединениеADO(ПутьКШаблонуБазы);
	РаботаСAccessКлиентСервер.СоздатьТаблицуБазыДанных(ПутьКШаблонуБазы, ОписаниеСтруктурыТаблицы, Соединение, Ложь);
	РаботаСAccessКлиентСервер.ЗакрытьСоединениеADO(Соединение);
	
	// Инициализация вспомогательных параметров
	СоединениеСБазой = Неопределено;
	КоличествоВыгружено = 0;
	ФайлБазыДанныхОпределен = Ложь;
	НаборЗаписиТаблицыОпределен = Ложь;	
	НомерФайлаБазыДанных = 0;
	КоличествоВыгруженоВТекущуюБазу = 0;
	
	НомерЗаписи = 0;
	Стр = ПолучитьСледующуюЗапись(ИсточникДанных, НомерЗаписи);
	Пока Стр <> Неопределено Цикл
		
		Если НЕ ФайлБазыДанныхОпределен Тогда
			НомерФайлаБазыДанных = НомерФайлаБазыДанных + 1;
			ПутьКФайлу = ВременныйКаталогВыгрузки + "\ПорцияВыгрузки_" + XMLСтрока(НомерФайлаБазыДанных) + ".accdb";				
			КопироватьФайл(ПутьКШаблонуБазы, ПутьКФайлу);
			СоединениеСБазой = РаботаСAccessКлиентСервер.ПолучитьСоединениеADO(ПутьКФайлу); 	
			ФайлБазыДанныхОпределен = Истина;
		КонецЕсли;
		
		Если НЕ НаборЗаписиТаблицыОпределен Тогда
			Запись = РаботаСAccessКлиентСервер.ПолучитьНаборЗаписейADO(СоединениеСБазой, ИмяТаблицы);
			НаборЗаписиТаблицыОпределен = Истина;
		КонецЕсли;
		
		ЗначенияПолей = Стр;
		Если НЕ СопоставлениеПолейИсточникаИПриемника = Неопределено Тогда
			Если НЕ Стр.Макет = СопоставлениеПолейИсточникаИПриемника.ОсновнойМакет Тогда
				Стр = ПолучитьСледующуюЗапись(ИсточникДанных, НомерЗаписи);
				Продолжить;
			КонецЕсли;
			ЗначенияПолей = Новый Структура;
			Для Каждого ЭлементСоответствия Из СопоставлениеПолейИсточникаИПриемника.СоответствиеПараметровИПолей Цикл
				ИмяПараметра = ЭлементСоответствия.Значение;
				ЗначениеПараметра = Стр.ЗначенияПараметров[ЭлементСоответствия.Значение].Значение;
				ЗначенияПолей.Вставить(ЭлементСоответствия.Ключ, ЗначениеПараметра);		
			КонецЦикла;
		КонецЕсли;
		
		РаботаСAccessКлиентСервер.ДобавитьЗаписьВТаблицу(
			ОписаниеСтруктурыТаблицы,
			Запись,
			ЗначенияПолей);
		
		КоличествоВыгружено = КоличествоВыгружено + 1;
		КоличествоВыгруженоВТекущуюБазу = КоличествоВыгруженоВТекущуюБазу + 1;
		
		ДостигнутоМаксимальноеКоличествоЗаписей = Ложь;
		ДостигнутМаксимальныйРазмерБазы = Ложь;
		Если КоличествоВыгруженоВТекущуюБазу >= ОграниченияВыгрузкиКаждойБазы.МаксимальноеКоличествоЗаписей Тогда
			ДостигнутоМаксимальноеКоличествоЗаписей = Истина;	
		КонецЕсли;		
		Если КоличествоВыгружено % ОграниченияВыгрузкиКаждойБазы.ПорцияВыгрузкиДляПроверкиРазмераБазы = 0 Тогда
			ФайлБазыДанных = Новый Файл(ПутьКФайлу);
			РаботаСAccessКлиентСервер.Ожидание(3000);
			РазмерВБайтах = ФайлБазыДанных.Размер();
			РазмерВМегабайтах = РазмерВБайтах / 1024 / 1024;			
			Если РазмерВМегабайтах > ОграниченияВыгрузкиКаждойБазы.МаксимальныйРазмерМБ Тогда
				ДостигнутМаксимальныйРазмерБазы = Истина;		
			КонецЕсли;	
		КонецЕсли;
		
		Если ДостигнутМаксимальныйРазмерБазы
			ИЛИ ДостигнутоМаксимальноеКоличествоЗаписей Тогда
			
			НаборЗаписиТаблицыОпределен = Ложь;
			Запись = Неопределено;
			
			РаботаСAccessКлиентСервер.ЗакрытьСоединениеADO(СоединениеСБазой);						
			ФайлБазыДанныхОпределен = Ложь;					
			КоличествоВыгруженоВТекущуюБазу = 0;

		КонецЕсли;
		
		Стр = ПолучитьСледующуюЗапись(ИсточникДанных, НомерЗаписи);
		
	КонецЦикла;
	
	СтруктураРезультат.КоличествоВыгружено = КоличествоВыгружено;
	
	РаботаСAccessКлиентСервер.ЗакрытьСоединениеADO(СоединениеСБазой);
	
	// Переносим выгруженные базы в конечный каталог
	МассивСозданныхБаз = НайтиФайлы(ВременныйКаталогВыгрузки, "*.accdb", Ложь);
	Для Каждого ФайлБазы Из МассивСозданныхБаз Цикл
		ПереместитьФайл(ФайлБазы.ПолноеИмя, КаталогВыгрузки + "\" + ФайлБазы.Имя);
	КонецЦикла;
	
	РаботаСAccessКлиентСервер.УдалитьФайлЕслиВозможно(ВременныйКаталогВыгрузки);
	
	Возврат СтруктураРезультат;	
	
КонецФункции

Функция ПолучитьПараметрыВыгрузкиРезультатаКомпоновки(СхемаКомпоновкиДанных, Настройки)
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ТаблицаПрототип");
	ПараметрыВыгрузки.Вставить("СоответствиеВыраженияПараметраИПоляПрототипа");
	ПараметрыВыгрузки.Вставить("СоответствиеПараметровИПолей");
	ПараметрыВыгрузки.Вставить("ОсновнойМакет");
	
	ДокументРезультат = Новый ТабличныйДокумент;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;          
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,, Истина);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	СоответствиеВыраженияПараметраИПоляПрототипа = Новый Соответствие;
	СоответствиеПараметровИПолей = Неопределено;
	ТаблицаПрототип = Неопределено;
	ОсновнойМакет = Неопределено;
	
	Для Каждого НастройкиТекущегоМакета Из МакетКомпоновки.Макеты Цикл
		
		Если НастройкиТекущегоМакета.Параметры.Количество() > 0 Тогда
			ТаблицаПрототип = Новый ТаблицаЗначений;
			
			ПараметрыМакета = НастройкиТекущегоМакета.Параметры;
			Для Каждого ПараметрМакета Из ПараметрыМакета Цикл
				
				ИмяНабораДанных = Лев(ПараметрМакета.Выражение, СтрНайти(ПараметрМакета.Выражение, ".") - 1);
				
				Если НЕ ЗначениеЗаполнено(ИмяНабораДанных) Тогда
					Продолжить;
				КонецЕсли;
				
				ТекстЗапроса = МакетКомпоновки.НаборыДанных[ИмяНабораДанных].Запрос;
				СЗ = Новый СхемаЗапроса;
				СЗ.УстановитьТекстЗапроса(ТекстЗапроса);
				КолонкиЗапросов = СЗ.ПакетЗапросов[СЗ.ПакетЗапросов.Количество() - 1].Колонки;
				
				ПоляНабораДанных = МакетКомпоновки.НаборыДанных[ИмяНабораДанных].Поля;
				
				// 1. Находим поле набора данных
				ИмяПоля = Неопределено;
				ИмяПоляТаблицыПрототипа = Неопределено;
				Для Каждого ПолеНабора Из ПоляНабораДанных Цикл
					ПолныйПутьКДанным = ИмяНабораДанных + "." + ПолеНабора.ПутьКДанным;
					Если ПараметрМакета.Выражение = ПолныйПутьКДанным Тогда
						ИмяПоля = ПолеНабора.Имя;
						ИмяПоляТаблицыПрототипа = СтрЗаменить(ПолеНабора.ПутьКДанным, ".", "");
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				// 2. Находим по имени соответствующие поле запроса и его тип
				Для Каждого ПолеЗапроса Из КолонкиЗапросов Цикл
					Если ПолеЗапроса.Псевдоним = ИмяПоля Тогда
						НайденноеПолеЗапроса = ПолеЗапроса;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НайденноеПолеЗапроса = Неопределено Тогда
					Продолжить;
				КонецЕсли;					
				ТипПоляЗапроса = НайденноеПолеЗапроса.ТипЗначения;
				
				// 3. Создаем колонку таб части с именем (путь к данным без точек) и типом (как в запросе)
				ТаблицаПрототип.Колонки.Добавить(ИмяПоляТаблицыПрототипа, ТипПоляЗапроса);
				
				СоответствиеВыраженияПараметраИПоляПрототипа.Вставить(ПараметрМакета.Выражение, ИмяПоляТаблицыПрототипа);
				
			КонецЦикла;
			
			СоответствиеПараметровИПолей = Новый Соответствие;					
			ОсновнойМакет = НастройкиТекущегоМакета.Имя;
			ПараметрыМакета = НастройкиТекущегоМакета.Параметры;
			Для Каждого ПараметрМакета Из ПараметрыМакета Цикл
				ИмяПараметра = ПараметрМакета.Имя;
				ВыражениеПараметра = ПараметрМакета.Выражение;
				ИмяПоляИзВыражения = СоответствиеВыраженияПараметраИПоляПрототипа.Получить(ВыражениеПараметра);						
				СоответствиеПараметровИПолей.Вставить(ИмяПоляИзВыражения, ИмяПараметра);
			КонецЦикла;
						
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыВыгрузки.СоответствиеВыраженияПараметраИПоляПрототипа = СоответствиеВыраженияПараметраИПоляПрототипа;
	ПараметрыВыгрузки.СоответствиеПараметровИПолей = СоответствиеПараметровИПолей;
	ПараметрыВыгрузки.ТаблицаПрототип = ТаблицаПрототип;
	ПараметрыВыгрузки.ОсновнойМакет = ОсновнойМакет;
	
	Возврат ПараметрыВыгрузки;	
	
КонецФункции

Функция ПолучитьСледующуюЗапись(ИсточникДанных, НомерЗаписи)
	
	СледующаяЗапись = Неопределено;
	
	Если ТипЗнч(ИсточникДанных) = Тип("ТаблицаЗначений") Тогда
		НомерЗаписи = НомерЗаписи + 1;
		Если НЕ ИсточникДанных.Количество() < НомерЗаписи Тогда
			СледующаяЗапись = ИсточникДанных[НомерЗаписи - 1];
		КонецЕсли;
	ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		НомерЗаписи = НомерЗаписи + 1;
		Если ИсточникДанных.Следующий() Тогда
			СледующаяЗапись = ИсточникДанных;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("ПроцессорКомпоновкиДанных") Тогда
		НомерЗаписи = НомерЗаписи + 1;
		СледующаяЗапись = ИсточникДанных.Следующий();
	КонецЕсли;
	
	Возврат СледующаяЗапись;
	
КонецФункции

#КонецОбласти